{"ast":null,"code":"var _jsxFileName = \"/home/lazarus/projects/react/lights-out-lite/src/board.js\";\nimport React, { Component } from 'react';\nimport Cell from './cell';\nimport './board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard\n    };\n  }\n\n  createBoard() {\n    let board = [];\n\n    for (let y = 0; y < array.length; y++) {\n      let rows = [];\n\n      for (let x = 0; x < array.length; x++) {\n        rows.push(Math.random() > this.props.chanceLightStartsOn ? true : false);\n      }\n\n      board.push(rows);\n    }\n\n    return board;\n  }\n\n  flipCellsAround(coord) {\n    let {\n      ncols,\n      nrows\n    } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1);\n    let hasWon = this.state.board.every(row => cell.every(cell === fasle));\n    this.setState({\n      hasWon,\n      board\n    });\n  }\n\n  render() {\n    if (this.state.hasWon) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"You Won\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this);\n    }\n\n    let lBoard = [];\n\n    for (let y = 0; y < this.props.ncols; y++) {\n      row = [];\n\n      for (let x = 0; x < this.props.nrows; x++) {\n        row.push( /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(Cell, {\n            isLit: this.state.board[y][x],\n            flipCellsAroundMe: () => {\n              this.flipCellsAround(`${y}-${x}`);\n            }\n          }, `${y}-${x}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this));\n      }\n\n      lBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: lBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5,\n  chanceLightStartsOn: 0.25\n};","map":{"version":3,"names":["React","Component","Cell","Board","constructor","props","state","hasWon","board","createBoard","y","array","length","rows","x","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","ncols","nrows","split","map","Number","flipCell","every","row","cell","fasle","setState","render","lBoard","defaultProps"],"sources":["/home/lazarus/projects/react/lights-out-lite/src/board.js"],"sourcesContent":["import React, { Component } from 'react'\nimport Cell from './cell'\nimport './board.css'\n\nexport default class Board extends Component {\n    static defaultProps = \n    {\n        ncols: 5,\n        nrows: 5, \n        chanceLightStartsOn: 0.25\n    }\n    constructor(props) \n    {\n      super(props)\n    \n      this.state = {\n         hasWon : false,\n         board : this.createBoard,\n      }\n    }\n\n\n    createBoard()\n    {\n        let board = []\n        for (let y = 0; y < array.length; y++) {\n            let rows = []\n            for (let x = 0; x < array.length; x++) {\n                rows.push(Math.random() > this.props.chanceLightStartsOn?true:false)\n                \n            }\n            board.push(rows)\n        }\n        return board\n    }\n\n\n    flipCellsAround(coord) \n    {\n        let {ncols, nrows} = this.props;\n        let board = this.state.board;\n        let [y, x] = coord.split(\"-\").map(Number);\n\n\n  function flipCell(y, x) \n  {\n    // if this coord is actually on board, flip it\n\n    if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n      board[y][x] = !board[y][x];\n    }\n  }\n  flipCell(y,x)\n  flipCell(y+1,x)\n  flipCell(y-1,x)\n  flipCell(y,x+1)\n  flipCell(y,x-1)\n\n\n  let hasWon = this.state.board.every(row=>cell.every(cell===fasle))\n  this.setState({\n    hasWon,board\n  })\n\n}\n\n\n    \n  render() {\n    if(this.state.hasWon)\n    {\n        return(\n            <div>You Won</div>\n        )\n    }\n    let lBoard = []\n    for (let y = 0; y < this.props.ncols; y++) {\n        row = []\n        for (let x = 0; x < this.props.nrows; x++) {\n            row.push(\n                <td><Cell key={`${y}-${x}`} isLit = {this.state.board[y][x]} flipCellsAroundMe = {()=>{this.flipCellsAround(`${y}-${x}`)}}/></td>\n            )\n        }\n        lBoard.push(<tr>{row}</tr>)\n    }\n    return (\n      <table className='Board'>\n        <tbody>\n            {lBoard}\n        </tbody>\n      </table>\n    )\n  }\n}\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;;AAEA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;EAOzCG,WAAW,CAACC,KAAD,EACX;IACE,MAAMA,KAAN;IAEA,KAAKC,KAAL,GAAa;MACVC,MAAM,EAAG,KADC;MAEVC,KAAK,EAAG,KAAKC;IAFH,CAAb;EAID;;EAGDA,WAAW,GACX;IACI,IAAID,KAAK,GAAG,EAAZ;;IACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,KAAK,CAACC,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;MACnC,IAAIG,IAAI,GAAG,EAAX;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACC,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;QACnCD,IAAI,CAACE,IAAL,CAAUC,IAAI,CAACC,MAAL,KAAgB,KAAKZ,KAAL,CAAWa,mBAA3B,GAA+C,IAA/C,GAAoD,KAA9D;MAEH;;MACDV,KAAK,CAACO,IAAN,CAAWF,IAAX;IACH;;IACD,OAAOL,KAAP;EACH;;EAGDW,eAAe,CAACC,KAAD,EACf;IACI,IAAI;MAACC,KAAD;MAAQC;IAAR,IAAiB,KAAKjB,KAA1B;IACA,IAAIG,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;IACA,IAAI,CAACE,CAAD,EAAII,CAAJ,IAASM,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAb;;IAGN,SAASC,QAAT,CAAkBhB,CAAlB,EAAqBI,CAArB,EACA;MACE;MAEA,IAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGO,KAAd,IAAuBX,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGY,KAAzC,EAAgD;QAC9Cd,KAAK,CAACE,CAAD,CAAL,CAASI,CAAT,IAAc,CAACN,KAAK,CAACE,CAAD,CAAL,CAASI,CAAT,CAAf;MACD;IACF;;IACDY,QAAQ,CAAChB,CAAD,EAAGI,CAAH,CAAR;IACAY,QAAQ,CAAChB,CAAC,GAAC,CAAH,EAAKI,CAAL,CAAR;IACAY,QAAQ,CAAChB,CAAC,GAAC,CAAH,EAAKI,CAAL,CAAR;IACAY,QAAQ,CAAChB,CAAD,EAAGI,CAAC,GAAC,CAAL,CAAR;IACAY,QAAQ,CAAChB,CAAD,EAAGI,CAAC,GAAC,CAAL,CAAR;IAGA,IAAIP,MAAM,GAAG,KAAKD,KAAL,CAAWE,KAAX,CAAiBmB,KAAjB,CAAuBC,GAAG,IAAEC,IAAI,CAACF,KAAL,CAAWE,IAAI,KAAGC,KAAlB,CAA5B,CAAb;IACA,KAAKC,QAAL,CAAc;MACZxB,MADY;MACLC;IADK,CAAd;EAID;;EAICwB,MAAM,GAAG;IACP,IAAG,KAAK1B,KAAL,CAAWC,MAAd,EACA;MACI,oBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ;IAGH;;IACD,IAAI0B,MAAM,GAAG,EAAb;;IACA,KAAK,IAAIvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWgB,KAA/B,EAAsCX,CAAC,EAAvC,EAA2C;MACvCkB,GAAG,GAAG,EAAN;;MACA,KAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKT,KAAL,CAAWiB,KAA/B,EAAsCR,CAAC,EAAvC,EAA2C;QACvCc,GAAG,CAACb,IAAJ,eACI;UAAA,uBAAI,QAAC,IAAD;YAAwB,KAAK,EAAI,KAAKT,KAAL,CAAWE,KAAX,CAAiBE,CAAjB,EAAoBI,CAApB,CAAjC;YAAyD,iBAAiB,EAAI,MAAI;cAAC,KAAKK,eAAL,CAAsB,GAAET,CAAE,IAAGI,CAAE,EAA/B;YAAkC;UAArH,GAAY,GAAEJ,CAAE,IAAGI,CAAE,EAArB;YAAA;YAAA;YAAA;UAAA;QAAJ;UAAA;UAAA;UAAA;QAAA,QADJ;MAGH;;MACDmB,MAAM,CAAClB,IAAP,eAAY;QAAA,UAAKa;MAAL;QAAA;QAAA;QAAA;MAAA,QAAZ;IACH;;IACD,oBACE;MAAO,SAAS,EAAC,OAAjB;MAAA,uBACE;QAAA,UACKK;MADL;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAOD;;AAxF0C;AAAxB9B,K,CACV+B,Y,GACP;EACIb,KAAK,EAAE,CADX;EAEIC,KAAK,EAAE,CAFX;EAGIJ,mBAAmB,EAAE;AAHzB,C"},"metadata":{},"sourceType":"module"}