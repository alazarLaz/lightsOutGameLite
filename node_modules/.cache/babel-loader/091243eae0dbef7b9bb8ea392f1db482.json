{"ast":null,"code":"var _jsxFileName = \"/home/lazarus/projects/react/lights-out-lite/src/board.js\";\nimport React, { Component } from 'react';\nimport Cell from './cell';\nimport './board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard\n    };\n  }\n\n  createBoard() {\n    let board = [];\n\n    for (let y = 0; y < this.props.ncols; y++) {\n      let rows = [];\n\n      for (let x = 0; x < this.props.nrows; x++) {\n        rows.push(Math.random() > this.props.chanceLightStartsOn ? true : false);\n      }\n\n      board.push(rows);\n    }\n\n    return board;\n  }\n\n  flipCellsAround(coord) {\n    let {\n      ncols,\n      nrows\n    } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1);\n    let hasWon = this.state.board.every(row => row.every(cell => cell === false));\n    this.setState({\n      hasWon,\n      board\n    });\n  }\n\n  render() {\n    if (this.state.hasWon) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"You Won\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this);\n    }\n\n    let lBoard = [];\n\n    for (let y = 0; y < this.props.ncols; y++) {\n      row = [];\n\n      for (let x = 0; x < this.props.nrows; x++) {\n        row.push( /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(Cell, {\n            isLit: this.state.board[y][x],\n            flipCellsAroundMe: () => {\n              this.flipCellsAround(`${y}-${x}`);\n            }\n          }, `${y}-${x}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this));\n      }\n\n      lBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: lBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5,\n  chanceLightStartsOn: 0.25\n};","map":{"version":3,"names":["React","Component","Cell","Board","constructor","props","state","hasWon","board","createBoard","y","ncols","rows","x","nrows","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","split","map","Number","flipCell","every","row","cell","setState","render","lBoard","defaultProps"],"sources":["/home/lazarus/projects/react/lights-out-lite/src/board.js"],"sourcesContent":["import React, { Component } from 'react'\nimport Cell from './cell'\nimport './board.css'\n\nexport default class Board extends Component {\n    static defaultProps = \n    {\n        ncols: 5,\n        nrows: 5, \n        chanceLightStartsOn: 0.25\n    }\n    constructor(props) \n    {\n      super(props)\n    \n      this.state = {\n         hasWon : false,\n         board : this.createBoard,\n      }\n    }\n\n\n    createBoard()\n    {\n        let board = []\n        for (let y = 0; y < this.props.ncols; y++) {\n            let rows = []\n            for (let x = 0; x < this.props.nrows; x++) {\n                rows.push(Math.random() > this.props.chanceLightStartsOn?true:false)\n                \n            }\n            board.push(rows)\n        }\n        return board\n    }\n\n\n    flipCellsAround(coord) \n    {\n        let {ncols, nrows} = this.props;\n        let board = this.state.board;\n        let [y, x] = coord.split(\"-\").map(Number);\n\n\n  function flipCell(y, x) \n  {\n    // if this coord is actually on board, flip it\n\n    if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n      board[y][x] = !board[y][x];\n    }\n  }\n  flipCell(y,x)\n  flipCell(y+1,x)\n  flipCell(y-1,x)\n  flipCell(y,x+1)\n  flipCell(y,x-1)\n\n\n  let hasWon = this.state.board.every((row)=>row.every((cell) => cell=== false))\n  this.setState({\n    hasWon,board\n  })\n\n}\n\n\n    \n  render() {\n    if(this.state.hasWon)\n    {\n        return(\n            <div>You Won</div>\n        )\n    }\n    let lBoard = []\n    for (let y = 0; y < this.props.ncols; y++) {\n        row = []\n        for (let x = 0; x < this.props.nrows; x++) {\n            row.push(\n                <td><Cell key={`${y}-${x}`} isLit = {this.state.board[y][x]} flipCellsAroundMe = {()=>{this.flipCellsAround(`${y}-${x}`)}}/></td>\n            )\n        }\n        lBoard.push(<tr>{row}</tr>)\n    }\n    return (\n      <table className='Board'>\n        <tbody>\n            {lBoard}\n        </tbody>\n      </table>\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}